#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Full
Input = Stream
Parser = LL
#RegularDefinitions
L  : [A-Za-z]
D  : [0-9]
WS : [\ \t\n\r]
COMMENT : "(*" [^ "*" ]* "*)"
OL : [< >]
OA : ["/" "*" "+" "-"]
#Tokens
//pontuação
logic : {OL} | "==" | "!="
aritmetic : {OA}
open_brace : "{"
close_brace : "}"
open_par :"("
close_par : ")"
semicolon : ";"
comma: ","
assign : ":"


//tokens
id : {L} ( {L} | {D} | _ )*
//num : {D} ({D})*//um ou mais dígitos, seguido de qqr char menos letra
num : {D}+

//palavras chave
program = id : "program"
end   = id : "end"
if    = id : "if"
then  = id : "then"
else  = id : "else"
while = id : "while"
do    = id : "do"
write = id : "write"
endif = id : "endif"
read  = id : "read"
for   = id : "for"
var   = id : "var"

//ignorar espaços em branco e comentários
 : {WS}*
 :! {COMMENT}
// í é void

// codigo de teste:
//program{
//var teste, tst;
//if (teste==tst) then
//	write (ola);
//endif;
//while(teste>tst) do{
//	read (teste);
//};
//for (tst:0 ; tst!=10 ; tst: tst+1){
//	write (teste);
//};
//} 
#NonTerminals
<C>
<C_LIST>
<IF>
<ELSE>
<WHILE>
<WRITE>
<READ>
<VAR>
<VARS>
<ASSIGN>
<ARI_LIST>
<VAR_LIST>
<MORE>
<FOR>
<E>
<EL>


#Grammar
<C> ::= <IF>
      | <WHILE>
      | <WRITE>
      | <READ>
      | <ASSIGN>
      | <FOR>
      | <VAR>
      | program open_brace <C_LIST> close_brace;
<C_LIST> ::= <C> semicolon <C_LIST> |î;
<IF> ::= if open_par <EL> close_par then <C_LIST> <ELSE> endif; 
<ELSE> ::= else <C> |î;
<WHILE> ::= while open_par <EL> close_par do open_brace <C_LIST> close_brace;
<WRITE> ::= write open_par <E> close_par;
<READ> ::= read open_par id close_par;
<ASSIGN> ::= id assign <E> <ARI_LIST>;
<FOR> ::= for open_par <ASSIGN> semicolon <EL> semicolon <ASSIGN> close_par open_brace <C_LIST> close_brace;
<VAR> ::= var id <VAR_LIST>;
<VAR_LIST> ::= <VARS> <VAR_LIST> | î;
<ARI_LIST> ::= <MORE> <ARI_LIST> | î;
<MORE> ::= aritmetic <E>; 

<VARS> ::= comma id;

<E> ::= id
      | num;

<EL> ::= <E> logic <E>;


